handleP(d, si, isSplit, de)
    if d.leftP != si.p
        do v = Vertex(si.p)
        (l,r) = partitionVP(d, si.p, isSplit, de)
        v.left = l       
        v.right = handleQ(r, si)
        return v
    
    return handleQ(d, si, isSplit, de)
    
handleQ(d, si, isSplit, de)
    if d.rightP != si.q
        do v = Vertex(si.q)
        (l,r) = partitionVQ(d, si.q)
        v.left = handleS(l, si, isSplit, de)    
        v.right = r
        return v
    
    return handleS(d, si, isSplit, de)

handleS(d, si, isSplit, de)
    do v = Vertex(si)
    (u,d) = partitionH(d, si, isSplit, de)
    v.left = u
    v.right = d
    return v
    
partitionVP(d, p)
    // special case, upper == lower
    if p is on the line of d.leftNeighbor 
        do return (p.leftSear.left, d)
    
    return partitionV(d, p)
    
partitionVQ(d, q)
    // special case, upper == lower
    if q is on the line of d.rightNeighbor 
        do return (d, p.rightSear.right)
    
    return partitionV(d, q)

partitionV(d, p)
    // the vertical line on which p is
    split = getIntersection(d.top, p) 
    split(d.top, split)
    p' <- Vertex(p)
    addEdge(split, p')
    
    // the vertical line on which p is
    split = getIntersection(d.bottom, p)
    split(d.bottom, split)
    // split is the right vertex and botom one
    // also update trapezoids' info
    r = connectHelper(p', split).twin
    
    return (d, r)

partitionH(t, s, isSplit, de)
    if !isSplit
        do d = connectHelper(t.leftP, t.rightP)
        return (t,d)

    rightP <- t.rightP
    // rightNeighbors: upp == lower
    split = getIntersection(t.rightNeighbor, s)
    d = connectHelper(t.leftP, split)
    
    // delete rightNeighbors: upper == lower; assert
    if rightp lies above s
        de.add(d, split)
    else
        assert rightp lies below s
        de.add(t, split)
    return (t,d)
    
connectVertices(lV, rV, o, isHorizontal)
    if isHorizontal
        l <- o
        r <- connectHelper(lV, rV)
        l.rightNeighbors = r
        l.rightP = r.leftP = lV
        r.leftNeighbors = l
    else
        u <- o
        d <- connectHelper(lV, rV)
        
    
